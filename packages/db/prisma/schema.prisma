generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                        Int                   @id @default(autoincrement())
  email                     String?               @unique
  name                      String? 
  number                    String                @unique
  password                  String
  OnRampTransaction         OnRampTransaction[]
  Balance                   Balance[]
  sentTransfers             p2pTransfer[]       @relation(name: "FromUserRelation")
  receivedTransfers         p2pTransfer[]       @relation(name: "ToUserRelation")
  scheduledTransfers        scheduledTransfer[]     @relation(name: "FromUserScheduledTransfersRelation")
}

model Merchant  {
  id                        Int                     @id @default(autoincrement())
  email                     String                  @unique
  name                      String?
  password                  String
  phoneNumber               String?         
  businessType              String?         
  businessAddress           String?         
  profilePicture            String?       
  merchantBalance           MerchantBalance[]          
  OnRampTransaction         OnRampTransaction[] 
  p2pSentTransfers          p2pTransfer[]           @relation(name: "FromMerchantRelation")
  p2pReceivedTransfers      p2pTransfer[]           @relation(name: "ToMerchantRelation")
  scheduledTransfersToMerchant        scheduledTransfer[]     @relation(name: "ToMerchantScheduledTransfersRelation")
  scheduledTransfersFromMerchant        scheduledTransfer[]     @relation(name: "FromMerchantScheduledTransfersRelation")
}

model OnRampTransaction {
  id        Int          @id @default(autoincrement())
  status    OnRampStatus
  token     String       @unique
  provider  String
  amount    Int
  startTime DateTime
  userId    Int?
  user      User?         @relation(fields: [userId], references: [id])
  merchantId Int?
  merchant Merchant?     @relation(fields: [merchantId], references: [id])
}

model p2pTransfer {
  id                      Int          @id @default(autoincrement())
  amount                  Int
  timestamp               DateTime
  fromUserId              Int?
  fromUser                User?         @relation(name: "FromUserRelation", fields: [fromUserId], references: [id])
  toUserId                Int?
  toUser                  User?         @relation(name: "ToUserRelation", fields: [toUserId], references: [id])
  fromMerchantId          Int?
  fromMerchant            Merchant?    @relation(name: "FromMerchantRelation", fields: [fromMerchantId], references: [id])
  toMerchantId            Int?
  toMerchant              Merchant?    @relation(name: "ToMerchantRelation", fields: [toMerchantId], references: [id])
}

model Balance {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  amount Int
  locked Int
  user   User @relation(fields: [userId], references: [id])
}

model MerchantBalance {
  id         Int     @id @default(autoincrement())
  merchantId Int     @unique
  amount     Int     
  locked     Int     
  merchant   Merchant @relation(fields: [merchantId], references: [id])
}

model scheduledTransfer {
  id             Int        @id @default(autoincrement())
  fromUserId     Int?
  toMerchantId   Int?
  fromMerchantId Int?    
  amount         Int
  frequency      Frequency
  nextRun        DateTime
  status         TransferStatus
  toMerchant     Merchant?     @relation(name: "ToMerchantScheduledTransfersRelation", fields: [toMerchantId], references: [id])
  fromMerchant     Merchant?     @relation(name: "FromMerchantScheduledTransfersRelation", fields: [fromMerchantId], references: [id])
  fromUser       User?          @relation(name: "FromUserScheduledTransfersRelation", fields: [fromUserId], references: [id])
}

model ScheduledTasksdt {
  id              Int       @id @default(autoincrement())
  taskName        String    @unique
  cronExpression  String
  isActive        Boolean   @default(true)
  lastRun         DateTime?
}

enum Frequency {
  Daily
  Weekly
  Monthly
  Yearly
}

enum TransferStatus {
  Active
  Paused
  Completed
}


enum OnRampStatus {
  Success
  Failure
  Processing
}